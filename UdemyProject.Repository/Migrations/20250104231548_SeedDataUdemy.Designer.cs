// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UdemyProject.Repository;

#nullable disable

namespace UdemyProject.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250104231548_SeedDataUdemy")]
    partial class SeedDataUdemy
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UdemyProject.Repository.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("UdemyProject.Repository.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9d33bb88-8f9e-468e-a99a-e3116960d9cc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "23168afa-169d-48b2-9849-baf0d6c69caf",
                            CreatedAt = new DateTime(2025, 1, 4, 23, 15, 46, 810, DateTimeKind.Utc).AddTicks(318),
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            FullName = "John Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAELSxn5Do/O1dyhFSDBN03OWETdvN+xZk9Rlb/1U8Czpnj0hgg00H0c6qlb+Lar+0zA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "03824288-c110-4672-b455-2e6e442ba684",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = new Guid("187970c8-36f0-44db-9f17-6305d8813770"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75ded145-661f-40d5-9164-13257271a8e9",
                            CreatedAt = new DateTime(2025, 1, 4, 23, 15, 46, 888, DateTimeKind.Utc).AddTicks(6453),
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            FullName = "Jane Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEL0Ii6Dl0tzf5XYzD8ybq2MVJz2SlOgUgzN5gxdWrsZ8iJD4wvLBFCPu+FagcmlyCg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "efa7cdc1-edcd-4b9a-8626-bb9619be8df3",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = new Guid("f034198b-25ae-4ea2-99dc-1af0b20b8e50"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cc2b6620-14c1-4e81-b767-c49b629940d8",
                            CreatedAt = new DateTime(2025, 1, 4, 23, 15, 46, 987, DateTimeKind.Utc).AddTicks(4905),
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FullName = "Admin User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEGHHZG3wgodKpa73iinhN/lhzdYjv8Fq3zhC+f9PlPfEwIAxEWp6qP7pTZYSXTCw8w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "98d25609-f029-40db-9184-7d7befcf28e9",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("UdemyProject.Repository.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instructor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 0,
                            Description = "Learn C# from scratch",
                            Instructor = "John Smith",
                            Name = "C# Basics",
                            Price = 99.99m
                        },
                        new
                        {
                            Id = 2,
                            Category = 6,
                            Description = "Master React",
                            Instructor = "Jane Smith",
                            Name = "React for Beginners",
                            Price = 79.99m
                        },
                        new
                        {
                            Id = 3,
                            Category = 0,
                            Description = "Build web applications",
                            Instructor = "Mark Wilson",
                            Name = "ASP.NET Core",
                            Price = 119.99m
                        },
                        new
                        {
                            Id = 4,
                            Category = 3,
                            Description = "Data analysis with Python",
                            Instructor = "Emily Johnson",
                            Name = "Python for Data Science",
                            Price = 89.99m
                        },
                        new
                        {
                            Id = 5,
                            Category = 0,
                            Description = "Learn Java from zero",
                            Instructor = "David Lee",
                            Name = "Java Basics",
                            Price = 69.99m
                        },
                        new
                        {
                            Id = 6,
                            Category = 5,
                            Description = "AI and Machine Learning",
                            Instructor = "Sophia Brown",
                            Name = "Machine Learning",
                            Price = 149.99m
                        },
                        new
                        {
                            Id = 7,
                            Category = 7,
                            Description = "Marketing strategies",
                            Instructor = "Chris Green",
                            Name = "Digital Marketing",
                            Price = 59.99m
                        },
                        new
                        {
                            Id = 8,
                            Category = 5,
                            Description = "Learn photography basics",
                            Instructor = "Laura White",
                            Name = "Photography",
                            Price = 39.99m
                        },
                        new
                        {
                            Id = 9,
                            Category = 9,
                            Description = "Produce your own music",
                            Instructor = "James Black",
                            Name = "Music Production",
                            Price = 129.99m
                        },
                        new
                        {
                            Id = 10,
                            Category = 8,
                            Description = "Stay healthy",
                            Instructor = "Olivia Blue",
                            Name = "Fitness and Wellness",
                            Price = 49.99m
                        });
                });

            modelBuilder.Entity("UdemyProject.Repository.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            OrderDate = new DateTime(2025, 1, 4, 23, 15, 47, 76, DateTimeKind.Utc).AddTicks(3147),
                            UserId = new Guid("9d33bb88-8f9e-468e-a99a-e3116960d9cc")
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            OrderDate = new DateTime(2025, 1, 4, 23, 15, 47, 76, DateTimeKind.Utc).AddTicks(3154),
                            UserId = new Guid("187970c8-36f0-44db-9f17-6305d8813770")
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 3,
                            OrderDate = new DateTime(2025, 1, 4, 23, 15, 47, 76, DateTimeKind.Utc).AddTicks(3157),
                            UserId = new Guid("9d33bb88-8f9e-468e-a99a-e3116960d9cc")
                        });
                });

            modelBuilder.Entity("UdemyProject.Repository.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 99.99m,
                            CourseId = 1,
                            PaymentDate = new DateTime(2025, 1, 4, 23, 15, 47, 76, DateTimeKind.Utc).AddTicks(3234),
                            PaymentMethod = "Credit Card",
                            PaymentStatus = "Completed",
                            TotalPrice = 99.99m,
                            UserId = new Guid("9d33bb88-8f9e-468e-a99a-e3116960d9cc")
                        },
                        new
                        {
                            Id = 2,
                            Amount = 79.99m,
                            CourseId = 2,
                            PaymentDate = new DateTime(2025, 1, 4, 23, 15, 47, 76, DateTimeKind.Utc).AddTicks(3244),
                            PaymentMethod = "PayPal",
                            PaymentStatus = "Completed",
                            TotalPrice = 79.99m,
                            UserId = new Guid("187970c8-36f0-44db-9f17-6305d8813770")
                        },
                        new
                        {
                            Id = 3,
                            Amount = 119.99m,
                            CourseId = 3,
                            PaymentDate = new DateTime(2025, 1, 4, 23, 15, 47, 76, DateTimeKind.Utc).AddTicks(3247),
                            PaymentMethod = "Credit Card",
                            PaymentStatus = "Completed",
                            TotalPrice = 119.99m,
                            UserId = new Guid("9d33bb88-8f9e-468e-a99a-e3116960d9cc")
                        });
                });

            modelBuilder.Entity("UdemyProject.Repository.Entities.UserRefreshToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("userRefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("UdemyProject.Repository.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("UdemyProject.Repository.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("UdemyProject.Repository.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("UdemyProject.Repository.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UdemyProject.Repository.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("UdemyProject.Repository.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UdemyProject.Repository.Entities.Order", b =>
                {
                    b.HasOne("UdemyProject.Repository.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UdemyProject.Repository.Entities.AppUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UdemyProject.Repository.Entities.Payment", b =>
                {
                    b.HasOne("UdemyProject.Repository.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UdemyProject.Repository.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UdemyProject.Repository.Entities.AppUser", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
